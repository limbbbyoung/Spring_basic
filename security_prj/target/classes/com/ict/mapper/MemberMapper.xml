<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.mapper.MemberMapper">
	<resultMap type="com.ict.domain.MemberVO" id="memberMap">
	<!-- 조인 등으로 기존 VO와 구조가 다른 데이터가 리턴되는 경우
	resultMap으로 묶습니다. primary key를 id 태그에 넣고
	result의 property에는 VO의 변수명, column은 DB상의 컬럼명을 넣습니다.
	이러면 VO의 변수명과 DB상의 컬럼명이 달라도 매칭이 됩니다. -->
	
	<!-- 해당 resultMap은 변수명과 컬럼명이 다를 것을 대비해서 매칭할 수 
	있도록 해주기 위함임 -->
		<id property="userid" column="userid"/>
		<result property="userid" column="userid"/>
		<result property="userpw" column="userpw"/>
		<result property="userName" column="username"/>
		<result property="regDate" column="regdate"/>
		<result property="updateDate" column="updatedate"/>
		<!-- collection 자료가 여러개인 List를 받는다. collection으로 사용하게 되면 
		자료를 여러개 가져올 수 있음. -->
		<collection property="authList" resultMap="authMap">
		</collection>
	</resultMap>
	
	<!-- resultMap은 자바에서의 VO의 변수명과 DB의 Column명이 다른 경우가 
	있다면 resultMap을 활용하면 변수명과 컬럼명이 달라도 매치 시켜줌.
	사용하는 또 다른 이유는 두 개이상의 테이블에서 데이터를 처리해서 하나의 자료를 만들어줄때, 
	두 개 이상의 데이터 처리할때 사용함-->
	
	<!-- 아래의 resultMap은 두 개 이상의 데이터를 처리해서 위 
	resultMap의 collection에 넣어주기 위함임 -->
	<resultMap type="com.ict.domain.AuthVO" id="authMap">
		<result property="userid" column="userid"/>
		<result property="auth" column="auth"/>	
	</resultMap>

	<select id="read" resultMap="memberMap">
		SELECT 
			m.userid, userpw, username, enabled, regdate, updatedate, a.auth
				FROM 
			member_tbl m LEFT OUTER JOIN member_auth a on m.userid = a.userid
				WHERE 
			m.userid = #{userid}
	</select>
	
	<insert id="insertMemberTbl">
		INSERT INTO MEMBER_TBL(userid, userpw, username)
			VALUES
		(#{userid}, #{userpw}, #{userName})
	</insert>
	
	<update id="insertMemberAuth">
		INSERT ALL
		<foreach collection="authList" item="item" separator=" ">
			INTO MEMBER_AUTH(userid, auth)
				VALUES
			(#{item.userid}, #{item.auth})
		</foreach>
		SELECT * FROM DUAL
	</update>
</mapper>