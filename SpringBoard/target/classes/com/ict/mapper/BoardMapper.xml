<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 위의 스키마 작성 후, 어떤 인터페이스의 메서드를 쿼리문과 
연결해 줄지 아래와 같이 인터페이스 파일부터 mapper태그로 연결합니다. -->
<mapper namespace="com.ict.mapper.BoardMapper">
		<!-- 조건문에 의한 동적쿼리를 반복해서 사용하기 위해 sql태그에 저장합니다. -->
	    <sql id="search">
		    <if test="searchType != null">
		    	<if test="searchType == 't'.toString()">
		    		(TITLE like '%'||#{keyword}||'%') AND
		    	</if>
		    	<if test="searchType == 'c'.toString()">
		    		(CONTENT like '%'||#{keyword}||'%') AND
		    	</if>
		    	<if test="searchType == 'w'.toString()">
		    		(WRITER like '%'||#{keyword}||'%') AND
		    	</if>
		    	<if test="searchType == 'tc'.toString()">
		    		((TITLE like '%'||#{keyword}||'%')
		    			OR
		    		 (CONTENT like '%'||#{keyword}||'%')) AND
		    	</if>
		    	<if test="searchType == 'cw'.toString()">
		    		((CONTENT like '%'||#{keyword}||'%')
		    			OR
		    		 (WRITER like '%'||#{keyword}||'%')) AND
		    	</if>
		    	<if test="searchType == 'tcw'.toString()">
		    		((TITLE like '%'||#{keyword}||'%')
		    			OR
		    		 (CONTENT like '%'||#{keyword}||'%')
		    			OR
		    		 (WRITER like '%'||#{keyword}||'%')) AND
		    	</if>
		    </if>	
		</sql>	
	<!-- 글 목록 -->
	<select id="getList" resultType="com.ict.persistence.BoardVO">
	<!-- <이나 >과 같이 태그로 오인될 수 있는 문자를 포함하는 
	쿼리문은 그냥 작성하지 않고, CDATA를 이용합니다.
	아래와 같이 <![CDATA[실행문]]>과 같이 실행문을
	CDATA내부에 작성하면 내부의 부등호는 전부 문자로 간주됩니다. -->
		<![CDATA[
			SELECT * FROM (
			SELECT 
			/*+ INDEX_DESC(board_tbl pk_board) */
			ROWNUM rn, board_tbl.* FROM board_tbl 
				WHERE 
		]]>
		<!-- 추가적으로 현업에선 와일드카드를 좋아하지않음. 가지고 오고 싶은 데이터만 
		뽑아서 가져오는 것을 선호함 -->
		
	    <!-- 동적쿼리조건이 들어올 자리 -->
	    <include refid="search"></include>
	    
		<![CDATA[	
			rownum <= (${page}*10))
			WHERE rn >(${page}-1)*10 
		]]>	  
	
	</select>
	
	<!-- 현재 insert는 BoardVO를 파라미터로 받고 있습니다.
	이 경우, VO 내부 변수를 #{변수명}으로 쿼리문에 전달할 수 있습니다.
	${변수명}이 아님을 주의해주세요. -->
	
	<!-- 글쓰기 -->
	<!-- 22.7.15 현재 로직으로는 bno에 들어갈 값을 미리 알 수 없으므로, 
	insert구문 실행 이전에 먼저 bno값을 구해놓고 전달하는 식으로 활용해야 vo내에 bno를 넣어줄 수 있음 -->
	<insert id="insert">
		<selectKey keyProperty="bno" keyColumn="bno" resultType="Long" order="BEFORE">
			SELECT board_num.nextval FROM dual
		</selectKey>
		<!-- #{bno}에는 board_num의 nextval 결과값이 들어있습니다. -->
		INSERT INTO board_tbl(bno, title, content, writer) VALUES
			(#{bno}, #{title}, #{content}, #{writer})
	</insert>
	
	<!-- 글 삭제하기 -->
	<delete id="delete">
		DELETE FROM board_tbl WHERE bno=#{bno}
	</delete>
	
	<!-- 글 수정하기 -->
	<update id="update">
		UPDATE board_tbl SET title=#{title}, content=#{content}, writer=#{writer},
			updatedate=SYSDATE WHERE bno=#{bno}
	</update>
	
	<!-- 글 상세 정보 -->
	<select id="getDetail" resultType="com.ict.persistence.BoardVO">
		<![CDATA[
			SELECT * FROM board_tbl WHERE bno=#{bno}
		]]>
	</select>
	
	<!-- 전체 글 갯수 구하기 -->
	<select id="getBoardCount" resultType="long">
			SELECT count(*) FROM board_tbl WHERE
			<!-- 여기에 sql태그에 저장된 조건절 넣기
			기존 코드는 검색조건에 무관하게 전체 DB글만 가져왔으므로
			검색조건에 따른 총 글 개수를 조건에 맞게 출력하도록 수정
			검색조건은 seachType 변수를 전달받아야 하므로
			컨트롤러, 서비스, 매퍼쪽에도 searchType을 받을 수 있게 
			getBoardCount 메서드에도 SearchCriteria를 전달합니다. -->
				<include refid="search"></include>
				<!-- 조건이 없을때도 WHERE절 뒤에 뭔가 붙여야 하므로 bno가 0보다 큰 경우라는 조건을 붙입니다. -->
			bno > 0
	</select>
	
	<update id="updateReplyCount">
		UPDATE board_tbl
			SET
		replycount = replycount + #{amount} WHERE bno = #{bno} 
	</update>
	
</mapper>
